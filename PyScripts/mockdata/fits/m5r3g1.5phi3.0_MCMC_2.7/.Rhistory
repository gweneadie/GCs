else if (X > 0 & U < p1(X)) {X = X+1}
else{X = 0}
b = b + f(X)
}
enlist[j] = b/M
biaslist[j] = (b/M) - pifsum
}
#E(en-pi(f)) approximately
sum(biaslist)/A  #estimate bias
sum(biaslist)*sqrt(M)/A  #sqrn(N) bias
var(enlist)
M*var(enlist)
A = 1000 #number of simulation to estimate expectation
enlist =  rep(0,A)
biaslist = rep(0,A)
M = 10000#each run length - n change here
X = 20 # starting point
for (j in 1:A){
X = 20
b = 0
for (i in 1:M){
U = runif(1) #generate uniform
if (X == 0 & U < del)  {X = 1}
else if (X > 0 & U < p1(X)) {X = X+1}
else{X = 0}
b = b + f(X)
}
enlist[j] = b/M
biaslist[j] = (b/M) - pifsum
}
#E(en-pi(f)) approximately
sum(biaslist)/A  #estimate bias
sum(biaslist)*sqrt(M)/A  #sqrn(N) bias
var(enlist)
M*var(enlist)
A = 1000 #number of simulation to estimate expectation
enlist =  rep(0,A)
biaslist = rep(0,A)
M = 100000#each run length - n change here
X = 20 # starting point
for (j in 1:A){
X = 20
b = 0
for (i in 1:M){
U = runif(1) #generate uniform
if (X == 0 & U < del)  {X = 1}
else if (X > 0 & U < p1(X)) {X = X+1}
else{X = 0}
b = b + f(X)
}
enlist[j] = b/M
biaslist[j] = (b/M) - pifsum
}
#E(en-pi(f)) approximately
sum(biaslist)/A  #estimate bias
sum(biaslist)*sqrt(M)/A  #sqrn(N) bias
var(enlist)
M*var(enlist)
A = 1000 #number of simulation to estimate expectation
enlist =  rep(0,A)
biaslist = rep(0,A)
M = 500000#each run length - n change here
X = 20 # starting point
for (j in 1:A){
X = 20
b = 0
for (i in 1:M){
U = runif(1) #generate uniform
if (X == 0 & U < del)  {X = 1}
else if (X > 0 & U < p1(X)) {X = X+1}
else{X = 0}
b = b + f(X)
}
enlist[j] = b/M
biaslist[j] = (b/M) - pifsum
}
#E(en-pi(f)) approximately
sum(biaslist)/A  #estimate bias
sum(biaslist)*sqrt(M)/A  #sqrn(N) bias
var(enlist)
M*var(enlist)
library(ggplot2)
library(plotly)
library(tidyverse)
library(matrixStats)
#IS data
setwd("~/Documents/Astro/GCs/PyScripts/mockdata/fits/m5r3g1.5phi3.0_IS_2.7")
N2 = 5000
ISlogp <- read.table('logp.txt')
names(ISlogp)[1] <- "ISlogp"
ISlogq <- read.table('logq.txt')
names(ISlogq)[1] <- "ISlogq"
ISdata <- cbind(ISlogp,ISlogq)
ISdata <- mutate(ISdata, l2 = exp(ISlogp - ISlogq)) #numerical error return l2=0
ISdata <- mutate(ISdata, logl2 = (ISlogp - ISlogq))
View(ISdata)
#MCMC data
setwd("~/Documents/Astro/GCs/PyScripts/mockdata/fits/m5r3g1.5phi3.0_MCMC_2.7")
N1 = 50000
MClogp <- scan('logp.txt')
MClogq <- scan('logq.txt')
MCdata <- data.frame(cbind(MClogp,MClogq))
MCdata <- mutate(MCdata, l1 = exp(MClogp - MClogq))
MCdata <- mutate(MCdata, logl1 = (MClogp - MClogq))
View(MCdata)
#use N_eff size
N1 = N1/(1+13.531)
#formula
s1 = N1/(N1+N2)
s2 = N2/(N1+N2)
logphat = 0
threshold <- 1e-5
stop = FALSE
while (!stop) {
# compute log(s1 * l2 + s2 * p) using stable log operations
logxnum = log(s1*exp(ISdata$logl2)+ s2*exp(logphat))
# compute log(numerator) using stable log operations
lognum = logSumExp(ISdata$logl2 - logxnum) - log(N2)
# compute log(s1 * l1 + s2 * p) using stable log operations
logxdenom =  log(s1*exp(MCdata$logl2) + s2*exp(logphat))
# compute log(denominator) using stable log operations
logdenom = logSumExp(0 - logxdenom) - log(N1)
logphat1 <- lognum - logdenom
stop <- abs(logphat1 - logphat) < threshold
logphat <- logphat1
}
logphat
while (!stop) {
# compute log(s1 * l2 + s2 * p) using stable log operations
logxnum = log(sum(s1*exp(ISdata$logl2)+ s2*exp(logphat)))
# compute log(numerator) using stable log operations
lognum = logSumExp(ISdata$logl2 - logxnum) - log(N2)
# compute log(s1 * l1 + s2 * p) using stable log operations
logxdenom =  log(sum(s1*exp(MCdata$logl2) + s2*exp(logphat)))
# compute log(denominator) using stable log operations
logdenom = logSumExp(0 - logxdenom) - log(N1)
logphat1 <- lognum - logdenom
stop <- abs(logphat1 - logphat) < threshold
logphat <- logphat1
}
logphat
while (!stop) {
# compute log(s1 * l2 + s2 * p) using stable log operations
logxnum = log(sum(s1*exp(ISdata$logl2)+ s2*exp(logphat)))
# compute log(numerator) using stable log operations
lognum = logSumExp(ISdata$logl2 - logxnum) - log(N2)
# compute log(s1 * l1 + s2 * p) using stable log operations
logxdenom =  log(sum(s1*exp(MCdata$logl1) + s2*exp(logphat)))
# compute log(denominator) using stable log operations
logdenom = logSumExp(0 - logxdenom) - log(N1)
logphat1 <- lognum - logdenom
stop <- abs(logphat1 - logphat) < threshold
logphat <- logphat1
}
logphat
logphat = 0
threshold <- 1e-5
stop = FALSE
while (!stop) {
# compute log(s1 * l2 + s2 * p) using stable log operations
logxnum = log(sum(s1*exp(ISdata$logl2)+ s2*exp(logphat)))
# compute log(numerator) using stable log operations
lognum = logSumExp(ISdata$logl2 - logxnum) - log(N2)
# compute log(s1 * l1 + s2 * p) using stable log operations
logxdenom =  log(sum(s1*exp(MCdata$logl1) + s2*exp(logphat)))
# compute log(denominator) using stable log operations
logdenom = logSumExp(0 - logxdenom) - log(N1)
logphat1 <- lognum - logdenom
stop <- abs(logphat1 - logphat) < threshold
logphat <- logphat1
}
logphat
logphat = 0
threshold <- 1e-5
stop = FALSE
while (!stop) {
# compute log(s1 * l2 + s2 * p) using stable log operations
logxnum = logSumExp(c(s1*ISdata$logl2,s2*logphat))
# compute log(numerator) using stable log operations
lognum = logSumExp(ISdata$logl2 - logxnum) - log(N2)
# compute log(s1 * l1 + s2 * p) using stable log operations
logxdenom = logSumExp(c(s1*MCdata$logl1, s2*logphat))
# compute log(denominator) using stable log operations
logdenom = logSumExp(0 - logxdenom) - log(N1)
logphat1 <- lognum - logdenom
stop <- abs(logphat1 - logphat) < threshold
logphat <- logphat1
}
logphat
niter = 1000
for (i in 1: niter){
# compute log(s1 * l2 + s2 * p) using stable log operations
logxnum = log(sum(s1*exp(ISdata$logl2)+ s2*exp(logphat)))
# compute log(numerator) using stable log operations
lognum = logSumExp(ISdata$logl2 - logxnum) - log(N2)
# compute log(s1 * l1 + s2 * p) using stable log operations
logxdenom =  log(sum(s1*exp(MCdata$logl1) + s2*exp(logphat)))
# compute log(denominator) using stable log operations
logdenom = logSumExp(0 - logxdenom) - log(N1)
logphat1 <- lognum - logdenom
logphat <- logphat1
}
logphat
exp(-7777)
logphat = 0
threshold <- 1e-5
niter = 1000
for (i in 1: niter){
# compute log(s1 * l2 + s2 * p) using stable log operations
logxnum = log(sum(exp(s1*ISdata$logl2)+ s2*exp(logphat)))
# compute log(numerator) using stable log operations
lognum = logSumExp(ISdata$logl2 - logxnum) - log(N2)
# compute log(s1 * l1 + s2 * p) using stable log operations
logxdenom =  log(sum(exp(s1*MCdata$logl1) + s2*exp(logphat)))
# compute log(denominator) using stable log operations
logdenom = logSumExp(0 - logxdenom) - log(N1)
logphat1 <- lognum - logdenom
logphat <- logphat1
}
logphat
logphat = 0
threshold <- 1e-5
niter = 1000
for (i in 1: niter){
# compute log(s1 * l2 + s2 * p) using stable log operations
logxnum =  logSumExp(c(log(s1),ISdata$logl2)) + logSumExp(c(log(s2,logphat)))
# compute log(numerator) using stable log operations
lognum = logSumExp(ISdata$logl2 - logxnum) - log(N2)
# compute log(s1 * l1 + s2 * p) using stable log operations
logxdenom = logSumExp(c(log(s1),MCdata$logl1)) + logSumExp(c(log(s2,logphat)))
# compute log(denominator) using stable log operations
logdenom = logSumExp(0 - logxdenom) - log(N1)
logphat1 <- lognum - logdenom
logphat <- logphat1
}
logphat
logphat = 0
threshold <- 1e-5
niter = 1000
for (i in 1: niter){
# compute log(s1 * l2 + s2 * p) using stable log operations
logxnum =  logSumExp(c(log(s1),ISdata$logl2)) + logSumExp(c(log(s2),logphat))
# compute log(numerator) using stable log operations
lognum = logSumExp(ISdata$logl2 - logxnum) - log(N2)
# compute log(s1 * l1 + s2 * p) using stable log operations
logxdenom = logSumExp(c(log(s1),MCdata$logl1)) + logSumExp(c(log(s2),logphat))
# compute log(denominator) using stable log operation
logdenom = logSumExp(0 - logxdenom) - log(N1)
logphat1 <- lognum - logdenom
=
logphat <- logphat1
}
logphat
##Accurate Log SumExp 2
logphat = 0
threshold <- 1e-5
niter = 1000
for (i in 1: niter){
# compute log(s1 * l2 + s2 * p) using stable log operations
logxnum =  logSumExp(c(log(s1),ISdata$logl2)) + logSumExp(c(log(s2),logphat))
# compute log(numerator) using stable log operations
lognum = logSumExp(ISdata$logl2 - logxnum) - log(N2)
# compute log(s1 * l1 + s2 * p) using stable log operations
logxdenom = logSumExp(c(log(s1),MCdata$logl1)) + logSumExp(c(log(s2),logphat))
# compute log(denominator) using stable log operation
logdenom = logSumExp(0 - logxdenom) - log(N1)
logphat1 <- lognum - logdenom
=
logphat <- logphat1
}
logphat
##Accurate Log SumExp 2
logphat = 0
threshold <- 1e-5
niter = 1000
for (i in 1: niter){
# compute log(s1 * l2 + s2 * p) using stable log operations
logxnum =  logSumExp(c(log(s1),ISdata$logl2)) + logSumExp(c(log(s2),logphat))
# compute log(numerator) using stable log operations
lognum = logSumExp(ISdata$logl2 - logxnum) - log(N2)
# compute log(s1 * l1 + s2 * p) using stable log operations
logxdenom = logSumExp(c(log(s1),MCdata$logl1)) + logSumExp(c(log(s2),logphat))
# compute log(denominator) using stable log operation
logdenom = logSumExp(0 - logxdenom) - log(N1)
logphat1 <- lognum - logdenom
logphat <- logphat1
}
logphat
s1
N1
N1 = N1/(1+13.531)
N1
setwd("~/Documents/Astro/GCs/PyScripts/mockdata/fits/m5r3g1.5phi3.0_IS_2.7")
N2 = 5000
ISlogp <- read.table('logp.txt')
names(ISlogp)[1] <- "ISlogp"
ISlogq <- read.table('logq.txt')
names(ISlogq)[1] <- "ISlogq"
ISdata <- cbind(ISlogp,ISlogq)
ISdata <- mutate(ISdata, l2 = exp(ISlogp - ISlogq)) #numerical error return l2=0
ISdata <- mutate(ISdata, logl2 = (ISlogp - ISlogq))
setwd("~/Documents/Astro/GCs/PyScripts/mockdata/fits/m5r3g1.5phi3.0_MCMC_2.7")
N1 = 50000
MClogp <- scan('logp.txt')
MClogq <- scan('logq.txt')
MCdata <- data.frame(cbind(MClogp,MClogq))
MCdata <- mutate(MCdata, l1 = exp(MClogp - MClogq))
MCdata <- mutate(MCdata, logl1 = (MClogp - MClogq))
#use N_eff size
N1 = N1/(1+13.531)
#formula
s1 = N1/(N1+N2)
s2 = N2/(N1+N2)
N1
N1
logphat = 0
threshold <- 1e-5
niter = 1000
for (i in 1: niter){
# compute log(s1 * l2 + s2 * p) using stable log operations
logxnum =  logSumExp(c(log(s1),ISdata$logl2)) + logSumExp(c(log(s2),logphat))
# compute log(numerator) using stable log operations
lognum = logSumExp(ISdata$logl2 - logxnum) - log(N2)
# compute log(s1 * l1 + s2 * p) using stable log operations
logxdenom = logSumExp(c(log(s1),MCdata$logl1)) + logSumExp(c(log(s2),logphat))
# compute log(denominator) using stable log operation
logdenom = logSumExp(0 - logxdenom) - log(N1)
logphat1 <- lognum - logdenom
logphat <- logphat1
}
logphat
logphat = 0
threshold <- 1e-5
stop = FALSE
while (!stop){
# compute log(s1 * l2 + s2 * p) using stable log operations
logxnum =  logSumExp(c(log(s1),ISdata$logl2)) + logSumExp(c(log(s2),logphat))
# compute log(numerator) using stable log operations
lognum = logSumExp(ISdata$logl2 - logxnum) - log(N2)
# compute log(s1 * l1 + s2 * p) using stable log operations
logxdenom = logSumExp(c(log(s1),MCdata$logl1)) + logSumExp(c(log(s2),logphat))
# compute log(denominator) using stable log operation
logdenom = logSumExp(0 - logxdenom) - log(N1)
logphat1 <- lognum - logdenom
stop <- abs(logphat1 - logphat) < threshold
logphat <- logphat1
}
logphat
setwd("~/Documents/Astro/GCs/PyScripts/mockdata/fits/m5r3g1.5phi3.0_IS_2.7_a")
N2 = 5000
ISlogp <- read.table('logp.txt')
names(ISlogp)[1] <- "ISlogp"
ISlogq <- read.table('logq.txt')
names(ISlogq)[1] <- "ISlogq"
ISdata <- cbind(ISlogp,ISlogq)
ISdata <- mutate(ISdata, l2 = exp(ISlogp - ISlogq)) #numerical error return l2=0
ISdata <- mutate(ISdata, logl2 = (ISlogp - ISlogq))
setwd("~/Documents/Astro/GCs/PyScripts/mockdata/fits/m5r3g1.5phi3.0_MCMC_2.7_a")
N1 = 50000
MClogp <- scan('logp.txt')
MClogq <- scan('logq.txt')
MCdata <- data.frame(cbind(MClogp,MClogq))
MCdata <- mutate(MCdata, l1 = exp(MClogp - MClogq))
MCdata <- mutate(MCdata, logl1 = (MClogp - MClogq))
#use N_eff size
N1 = N1/(1+15.3027)
#formula
s1 = N1/(N1+N2)
s2 = N2/(N1+N2)
##Accurate Log SumExp 2
logphat = 0
threshold <- 1e-5
stop = FALSE
while (!stop){
# compute log(s1 * l2 + s2 * p) using stable log operations
logxnum =  logSumExp(c(log(s1),ISdata$logl2)) + logSumExp(c(log(s2),logphat))
# compute log(numerator) using stable log operations
lognum = logSumExp(ISdata$logl2 - logxnum) - log(N2)
# compute log(s1 * l1 + s2 * p) using stable log operations
logxdenom = logSumExp(c(log(s1),MCdata$logl1)) + logSumExp(c(log(s2),logphat))
# compute log(denominator) using stable log operation
logdenom = logSumExp(0 - logxdenom) - log(N1)
logphat1 <- lognum - logdenom
stop <- abs(logphat1 - logphat) < threshold
logphat <- logphat1
}
logphat
#IS data
setwd("~/Documents/Astro/GCs/PyScripts/mockdata/fits/m5r3g1.5phi3.0_IS_2.7_a")
N2 = 5000
table1 <-read.table('logp.txt')
View(table1)
#MCMC data
setwd("~/Documents/Astro/GCs/PyScripts/mockdata/fits/m5r3g1.5phi3.0_MCMC_2.7_a")
N1 = 50000
table1 <-read.table('logp.txt')
View(table1)
table1[,15]
table1[1,2]
table1[2,3]
MClogp <- scan(table1[,15],table1[,30],table1[,45])
MClogp <- scan(cbind(table1[,15],table1[,30],table1[,45]))
cbind(table1[,15],table1[,30],table1[,45])
MClogp <- scan(cbind(table1[,15],table1[,30],table1[,45])).
MClogp <- scan(cbind(table1[,15],table1[,30],table1[,45]))
rbind(table1[,15],table1[,30],table1[,45])
View
View(rbind(table1[,15],table1[,30]))
View(cbind(table1[,15],table1[,30]))
View(c(table1[,15],table1[,30]))
#----------------------------
#Thinning #MCMC data
setwd("~/Documents/Astro/GCs/PyScripts/mockdata/fits/m5r3g1.5phi3.0_MCMC_2.7_a")
N1 = 50000
table1 <-read.table('logp.txt')
MClogp <- c(table1[,15],table1[,30],table1[,45])
table2 <- read.table('logq.txt')
MClogq <- c(table2[,15],table2[,30],table2[,45])
MCdata <- data.frame(cbind(MClogp,MClogq))
View(MCdata)
MCdata <- data.frame(cbind(MClogp,MClogq))
MCdata <- mutate(MCdata, l1 = exp(MClogp - MClogq))
MCdata <- mutate(MCdata, logl1 = (MClogp - MClogq))
View(MCdata)
setwd("~/Documents/Astro/GCs/PyScripts/mockdata/fits/m5r3g1.5phi3.0_IS_2.7_a")
N2 = 5000
ISlogp <- read.table('logp.txt')
names(ISlogp)[1] <- "ISlogp"
ISlogq <- read.table('logq.txt')
names(ISlogq)[1] <- "ISlogq"
ISdata <- cbind(ISlogp,ISlogq)
ISdata <- mutate(ISdata, l2 = exp(ISlogp - ISlogq)) #numerical error return l2=0
ISdata <- mutate(ISdata, logl2 = (ISlogp - ISlogq))
View(ISdata)
setwd("~/Documents/Astro/GCs/PyScripts/mockdata/fits/m5r3g1.5phi3.0_MCMC_2.7_a")
N1 = 50000
table1 <-read.table('logp.txt')
MClogp <- c(table1[,15],table1[,30],table1[,45])
table2 <- read.table('logq.txt')
MClogq <- c(table2[,15],table2[,30],table2[,45])
MCdata <- data.frame(cbind(MClogp,MClogq))
MCdata <- mutate(MCdata, l1 = exp(MClogp - MClogq))
MCdata <- mutate(MCdata, logl1 = (MClogp - MClogq))
View(MCdata)
#formula
s1 = N1/(N1+N2)
s2 = N2/(N1+N2)
##Accurate Log SumExp 2
logphat = 0
threshold <- 1e-5
stop = FALSE
while (!stop){
# compute log(s1 * l2 + s2 * p) using stable log operations
logxnum =  logSumExp(c(log(s1),ISdata$logl2)) + logSumExp(c(log(s2),logphat))
# compute log(numerator) using stable log operations
lognum = logSumExp(ISdata$logl2 - logxnum) - log(N2)
# compute log(s1 * l1 + s2 * p) using stable log operations
logxdenom = logSumExp(c(log(s1),MCdata$logl1)) + logSumExp(c(log(s2),logphat))
# compute log(denominator) using stable log operation
logdenom = logSumExp(0 - logxdenom) - log(N1)
logphat1 <- lognum - logdenom
stop <- abs(logphat1 - logphat) < threshold
logphat <- logphat1
}
logphat
#IS data
setwd("~/Documents/Astro/GCs/PyScripts/mockdata/fits/m5r3g1.5phi3.0_IS_2.7")
N2 = 5000
ISlogp <- read.table('logp.txt')
names(ISlogp)[1] <- "ISlogp"
ISlogq <- read.table('logq.txt')
names(ISlogq)[1] <- "ISlogq"
ISdata <- cbind(ISlogp,ISlogq)
ISdata <- mutate(ISdata, l2 = exp(ISlogp - ISlogq)) #numerical error return l2=0
ISdata <- mutate(ISdata, logl2 = (ISlogp - ISlogq))
View(ISdata)
N1 = 50000
#formula
s1 = N1/(N1+N2)
s2 = N2/(N1+N2)
#----------------------------
#Thinning #MCMC data
setwd("~/Documents/Astro/GCs/PyScripts/mockdata/fits/m5r3g1.5phi3.0_MCMC_2.7")
N1 = 50000
table1 <-read.table('logp.txt')
setwd("~/Documents/Astro/GCs/PyScripts/mockdata/fits/m5r3g1.5phi3.0_MCMC_2.7")
N1 = 50000
table1 <-read.table('logp.txt')
MClogp <- c(table1[,13],table1[,26],table1[,39])
table2 <- read.table('logq.txt')
MClogq <- c(table2[,13],table2[,26],table2[,39])
MCdata <- data.frame(cbind(MClogp,MClogq))
MCdata <- mutate(MCdata, l1 = exp(MClogp - MClogq))
MCdata <- mutate(MCdata, logl1 = (MClogp - MClogq))
View(MCdata)
logphat = 0
threshold <- 1e-5
stop = FALSE
while (!stop){
# compute log(s1 * l2 + s2 * p) using stable log operations
logxnum =  logSumExp(c(log(s1),ISdata$logl2)) + logSumExp(c(log(s2),logphat))
# compute log(numerator) using stable log operations
lognum = logSumExp(ISdata$logl2 - logxnum) - log(N2)
# compute log(s1 * l1 + s2 * p) using stable log operations
logxdenom = logSumExp(c(log(s1),MCdata$logl1)) + logSumExp(c(log(s2),logphat))
# compute log(denominator) using stable log operation
logdenom = logSumExp(0 - logxdenom) - log(N1)
logphat1 <- lognum - logdenom
stop <- abs(logphat1 - logphat) < threshold
logphat <- logphat1
}
logphat
