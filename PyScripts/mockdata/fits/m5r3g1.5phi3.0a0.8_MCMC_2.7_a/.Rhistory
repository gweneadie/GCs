for (i in 1:M){
U = runif(1) #generate uniform
if (X == 0 & U < del)  {X = 1}
else if (X > 0 & U < p1(X)) {X = X+1}
else{X = 0}
b = b + f(X)
}
enlist[j] = b/M
biaslist[j] = (b/M) - pifsum
}
#E(en-pi(f)) approximately
sum(biaslist)/A  #estimate bias
sum(biaslist)*sqrt(M)/A  #sqrn(N) bias
var(enlist)
M*var(enlist)
#IS data
setwd("~/Documents/Astro/GCs/PyScripts/mockdata/fits/m5r3g1.5phi3.0_IS_2.7")
N2 = 5000
ISlogp <- read.table('logp.txt')
names(ISlogp)[1] <- "ISlogp"
ISlogq <- read.table('logq.txt')
names(ISlogq)[1] <- "ISlogq"
ISdata <- cbind(ISlogp,ISlogq)
ISdata <- mutate(ISdata, l2 = exp(ISlogp - ISlogq)) #numerical error return l2=0
library(ggplot2)
library(plotly)
library(tidyverse)
library(matrixStats)
ISdata <- cbind(ISlogp,ISlogq)
ISdata <- mutate(ISdata, l2 = exp(ISlogp - ISlogq)) #numerical error return l2=0
ISdata <- mutate(ISdata, logl2 = (ISlogp - ISlogq))
View(ISdata)
#MCMC data
setwd("~/Documents/Astro/GCs/PyScripts/mockdata/fits/m5r3g1.5phi3.0_MCMC_2.7")
N1 = 50000
table1 <-read.table('logp.txt')
MClogp <- scan('logp.txt')
MClogq <- scan('logq.txt')
MCdata <- data.frame(cbind(MClogp,MClogq))
MCdata <- mutate(MCdata, l1 = exp(MClogp - MClogq))
MCdata <- mutate(MCdata, logl1 = (MClogp - MClogq))
N1
#use N_eff size
N1 = N1/(1+13.531)
N1
#formula
s1 = N1/(N1+N2)
s2 = N2/(N1+N2)
##Accurate Log SumExp 2
logphat = 0
threshold <- 1e-5
stop = FALSE
while (!stop){
# compute log(s1 * l2 + s2 * p) using stable log operations
logxnum = logSumExp(c(logSumExp(c(log(s1),ISdata$logl2)),logSumExp(c(log(s2),logphat))))
# compute log(numerator) using stable log operations
lognum = logSumExp(ISdata$logl2 - logxnum) - log(N2)
# compute log(s1 * l1 + s2 * p) using stable log operations
logxdenom = logSumExp(c(logSumExp(c(log(s1),MCdata$logl1)),logSumExp(c(log(s2),logphat))))
# compute log(denominator) using stable log operation
logdenom = logSumExp(0 - logxdenom) - log(N1)
logphat1 <- lognum - logdenom
stop <- abs(logphat1 - logphat) < threshold
logphat <- logphat1
}
logphat
N1 = 50000
setwd("~/Documents/Astro/GCs/PyScripts/mockdata/fits/m5r3g1.5phi3.0_MCMC_2.7")
N1 = 50000
table1 <-read.table('logp.txt')
MClogp <- c(table1[,13],table1[,26],table1[,39])
table2 <- read.table('logq.txt')
MClogq <- c(table2[,13],table2[,26],table2[,39])
MCdata <- data.frame(cbind(MClogp,MClogq))
MCdata <- mutate(MCdata, l1 = exp(MClogp - MClogq))
MCdata <- mutate(MCdata, logl1 = (MClogp - MClogq))
View(MCdata)
logphat = 0
threshold <- 1e-5
stop = FALSE
while (!stop){
# compute log(s1 * l2 + s2 * p) using stable log operations
logxnum = logSumExp(c(logSumExp(c(log(s1),ISdata$logl2)),logSumExp(c(log(s2),logphat))))
# compute log(numerator) using stable log operations
lognum = logSumExp(ISdata$logl2 - logxnum) - log(N2)
# compute log(s1 * l1 + s2 * p) using stable log operations
logxdenom = logSumExp(c(logSumExp(c(log(s1),MCdata$logl1)),logSumExp(c(log(s2),logphat))))
# compute log(denominator) using stable log operation
logdenom = logSumExp(0 - logxdenom) - log(N1)
logphat1 <- lognum - logdenom
stop <- abs(logphat1 - logphat) < threshold
logphat <- logphat1
}
logphat
knitr::opts_chunk$set(echo = TRUE)
install.packages("astsa")
xt <- rep(0,200)
for (i in 1:100){
y = 10*exp(-i/20)*cos(2*pi*(100+i)/4)
xt[(100+i)] <- y
}
w = rnorm(200,0,1)
xt1 <- xt+w
comp1 <- exp(-c(1:200)/20)
plot.ts(xt1)
abline(0,exp(-c(1:100)/20))
comp1
plot.ts(xt1)
lines(comp1)
plot.ts(xt1)
library(astsa)
plot.ts(comp1)
xt <- rep(0,200)
for (i in 1:100){
y = 10*exp(-i/20)*cos(2*pi*(100+i)/4)
xt[(100+i)] <- y
}
w = rnorm(200,0,1)
xt1 <- xt+w
plot.ts(xt1)
plot.ts(xt1,title = '(a)x_t')
plot.ts(xt1,main = '(a) x_t')
yt<- rep(0,200)
for (i in 1:100){
z = 10*exp(-i/200)*cos(2*pi*(100+i)/4)
yt[(100+i)] <- z
}
xt2 <- yt+w
plot.ts(xt2, main = '(b) x_t')
comp1 <- exp(-c(1:100)/20)
plot.ts(comp1)
comp2 <- exp(-c(1:100)/200)
plot.ts(comp2)
library(astsa)
plot.ts(jj)
q <- factor(cycle(jj))
Tt <- time(jj)
reg_model <- lm(log(jj)~Tt+q+0)
summary(reg_model)
par(mfrow=c(2,2))
plot(reg_model)
plot.ts(jj,main= "Johnson&Johnson quartely earnings per share")
lines(log(jj), col='blue')
library(astsa)
plot.ts(jj,main= "Johnson&Johnson quartely earnings per share")
lines(log(jj), col='blue')
q <- factor(cycle(jj))
Tt <- time(jj)
library(astsa)
plot.ts(jj,main= "Johnson&Johnson quartely earnings per share")
lines(log(jj), col='blue')+legend(col)
library(astsa)
plot.ts(jj,main= "Johnson&Johnson quartely earnings per share")
lines(log(jj), col='blue')
q <- factor(cycle(jj))
Tt <- time(jj)
Tt <- time(jj)-1960
reg_model <- lm(log(jj)~Tt+q+0)
summary(reg_model)
par(mfrow=c(2,2))
plot(reg_model)
Tt <- time(jj)-1970
reg_model <- lm(log(jj)~Tt+q+0)
summary(reg_model)
par(mfrow=c(2,2))
plot(reg_model)
reg_inter <- lm(log(jj)~Tt+q)
summary(reg_inter)
par(mfrow=c(2,2))
plot(reg_inter)
fitted_v <- predict(reg_inter)
tt1 <- as.matrix(Tt)
jj1 <- as.matrix(jj)
plot(x=tt1,y=fitted_v,type='l',col='red',main="A")
lines(x=tt1,y=log(jj1))
tt1
Tt <- time(jj)
fitted_v <- predict(reg_inter)
tt1 <- as.matrix(Tt)
jj1 <- as.matrix(jj)
plot(x=tt1,y=fitted_v,type='l',col='blue',xlab= "Time",ylab = "Logged Earnings",main="Actual data & Fitted Values")
lines(x=tt1,y=log(jj1),ool='orange')
fitted_v <- predict(reg_inter)
tt1 <- as.matrix(Tt)
jj1 <- as.matrix(jj)
plot(x=tt1,y=fitted_v,type='l',col='blue',xlab= "Time",ylab = "Logged Earnings",main="Actual data & Fitted Values")
lines(x=tt1,y=log(jj1),col='orange')
fitted_v <- predict(reg_inter)
tt1 <- as.matrix(Tt)
jj1 <- as.matrix(jj)
plot(x=tt1,y=fitted_v,type='l',col='blue',xlab= "Time",ylab = "Logged Earnings",main="Actual data & Fitted Values")
lines(x=tt1,y=log(jj1))
legend()
fitted_v <- predict(reg_inter)
tt1 <- as.matrix(Tt)
jj1 <- as.matrix(jj)
plot(x=tt1,y=fitted_v,type='l',col='blue',xlab= "Time",ylab = "Logged Earnings",main="Actual data & Fitted Values")
lines(x=tt1,y=log(jj1))
legend()
fitted_v <- predict(reg_inter)
tt1 <- as.matrix(Tt)
jj1 <- as.matrix(jj)
plot(x=tt1,y=fitted_v,type='l',col='blue',xlab= "Time",ylab = "Logged Earnings",main="Actual data & Fitted Values")
lines(x=tt1,y=log(jj1))
legend(1, 95, legend=c("Line 1", "Line 2"),
col=c("red", "blue"), lty=1:2, cex=0.8)
legend(1, 95, legend=c("Line 1", "Line 2"),col=c("red", "blue"), lty=1:2, cex=0.8)
legend(1, 95, legend=c("Line 1", "Line 2"),col=c("red", "blue"), lty=1:2, cex=0.8)
fitted_v <- predict(reg_inter)
tt1 <- as.matrix(Tt)
jj1 <- as.matrix(jj)
plot(x=tt1,y=fitted_v,type='l',col='blue',xlab= "Time",ylab = "Logged Earnings",main="Actual data & Fitted Values")
lines(x=tt1,y=log(jj1))
legend(1,legend=c("Line 1", "Line 2"),col=c("red", "blue"))
legend(1,legend=c("Line 1", "Line 2"),col=c("red", "blue"))
fitted_v <- predict(reg_inter)
tt1 <- as.matrix(Tt)
jj1 <- as.matrix(jj)
plot(x=tt1,y=fitted_v,type='l',col='blue',xlab= "Time",ylab = "Logged Earnings",main="Actual data & Fitted Values")
lines(x=tt1,y=log(jj1))
legend(1960,legend=c("Line 1", "Line 2"),col=c("red", "blue"))
plot(x=tt1,y=fitted_v,type='l',col='blue',xlab= "Time",ylab = "Logged Earnings",main="Actual data & Fitted Values")
lines(x=tt1,y=log(jj1))
fitted_v <- predict(reg_inter)
tt1 <- as.matrix(Tt)
jj1 <- as.matrix(jj)
plot(x=tt1,y=fitted_v,type='l',col='blue',xlab= "Time",ylab = "Logged Earnings",main="Actual data & Fitted Values")
lines(x=tt1,y=log(jj1))
legend(1960,legend=c("Line 1", "Line 2"),col=c("red", "blue"))
fitted_v <- predict(reg_inter)
tt1 <- as.matrix(Tt)
jj1 <- as.matrix(jj)
plot(x=tt1,y=fitted_v,type='l',col='blue',xlab= "Time",ylab = "Logged Earnings",main="Actual data & Fitted Values")
lines(x=tt1,y=log(jj1))
legend("bottomleft",
legend = c("Group 1", "Group 2"),
col = c(rgb(0.2,0.4,0.1,0.7),
rgb(0.8,0.4,0.1,0.7)),
pch = c(17,19),
bty = "n",
pt.cex = 2,
cex = 1.2,
text.col = "black",
horiz = F ,
inset = c(0.1, 0.1))
fitted_v <- predict(reg_inter)
tt1 <- as.matrix(Tt)
jj1 <- as.matrix(jj)
plot(x=tt1,y=fitted_v,type='l',col='blue',xlab= "Time",ylab = "Logged Earnings",main="Actual data & Fitted Values")
lines(x=tt1,y=log(jj1))
legend("bottomright",
legend = c("actual-log(jj)", "Fitted value"),
col = c('black','blue'),
pch = c(17,19),
bty = "n",
pt.cex = 2,
cex = 1.2,
text.col = "black",
horiz = F ,
inset = c(0.1, 0.1))
fitted_v <- predict(reg_inter)
tt1 <- as.matrix(Tt)
jj1 <- as.matrix(jj)
plot(x=tt1,y=fitted_v,type='l',col='blue',xlab= "Time",ylab = "Logged Earnings",main="Actual data & Fitted Values")
lines(x=tt1,y=log(jj1))
legend("bottomright",
legend = c("actual-log(jj)", "Fitted value"),
col = c('black','blue'),
horiz = F ,
inset = c(0.1, 0.1))
fitted_v <- predict(reg_inter)
tt1 <- as.matrix(Tt)
jj1 <- as.matrix(jj)
plot(x=tt1,y=fitted_v,type='l',col='blue',xlab= "Time",ylab = "Logged Earnings",main="Actual data & Fitted Values")
lines(x=tt1,y=log(jj1))
legend("bottomright",
legend = c("actual-log(jj)", "Fitted value"),
col = c('black','blue'),
pch = c(15,16),
bty = "n",
pt.cex = 2,
cex = 1.2,
text.col = "black",
horiz = F ,
inset = c(0.1, 0.1))
fitted_v <- predict(reg_inter)
tt1 <- as.matrix(Tt)
jj1 <- as.matrix(jj)
plot(x=tt1,y=fitted_v,type='l',col='blue',xlab= "Time",ylab = "Logged Earnings",main="Actual data & Fitted Values")
lines(x=tt1,y=log(jj1))
legend("bottomright",
legend = c("actual-log(jj)", "Fitted value"),
col = c('black','blue'),
pch = c(15,16),
bty = "n",
text.col = "black",
horiz = F ,
inset = c(0.1, 0.1))
residuals(reg_inter)
plot(x=tt1,y=residuals(reg_inter),type='l',xlab = 'Time')
residuals(reg_inter)
plot(x=tt1,y=residuals(reg_inter),type='l',xlab = 'Time',main = "Residuals")
abline(0)
residuals(reg_inter)
plot(x=tt1,y=residuals(reg_inter),type='l',xlab = 'Time',main = "Residuals")
abline(0)
residuals(reg_inter)
plot(x=tt1,y=residuals(reg_inter),type='l',xlab = 'Time',main = "Residuals")
abline(y=0)
plot(x=tt1,y=residuals(reg_inter),type='l',xlab = 'Time',main = "Residuals")
abline(y=0)
plot(x=tt1,y=residuals(reg_inter),type='l',xlab = 'Time',main = "Residuals")
abline(b=0)
plot(x=tt1,y=residuals(reg_inter),type='l',xlab = 'Time',main = "Residuals")
abline(a=1,b=0)
plot(x=tt1,y=residuals(reg_inter),type='l',xlab = 'Time',main = "Residuals")
abline(a=0,b=0)
plot(x=tt1,y=residuals(reg_inter),type='l',xlab = 'Time',main = "Residuals")
abline(a=0,b=0,col = 'green')
par(mfrow=c(1,2))
comp1 <- exp(-c(1:100)/20)
plot.ts(comp1, main = "exp(-t/20)")
comp2 <- exp(-c(1:100)/200)
plot.ts(comp2, main = "exp(-t/200)")
plot(xt)
plot(xt,type='l')
plot(yt,type = 'l')
par(mfrow=c(1,2))
plot(xt,type='l',main = "(a)mu_x")
plot(yt,type = 'l',main = "(b)mu_x")
par(mfrow=c(1,2))
plot(xt,type='l',main = "(a)mu_x",ylab = 's_t')
plot(yt,type = 'l',main = "(b)mu_x",ylab = 's_t')
library(astsa)
#look at raw data and its logged value
plot.ts(jj,main= "Johnson&Johnson quartely earnings per share")
lines(log(jj), col='blue')
q <- factor(cycle(jj)) #make Quarter factors
Tt <- time(jj)-1970 #from R-supplement, to center time
reg_model <- lm(log(jj)~Tt+q+0) #regression without intercept
summary(reg_model)
par(mfrow=c(2,2))
plot(reg_model)
#draw ACF
h <- c(-5:5)
p <- c(0,0,0,1/3.44,2.4/3.44,1,2.4/3.44,1/3.44,0,0,0)
plot(h,p, type = 'h',xlab = "lag h = |s-t|", main = "ACF")
2.4/3.44
#draw ACF
h <- c(-5:5)
p <- c(0,0,0,(1/3.44),(2.4/3.44),1,2.4/3.44,1/3.44,0,0,0)
plot(h,p, type = 'h',xlab = "lag h = |s-t|", main = "ACF")
library(ggplot2)
library(plotly)
library(tidyverse)
library(matrixStats)
#IS data
setwd("~/Documents/Astro/GCs/PyScripts/mockdata/fits/m5r3g1.5phi3.0a0.8_IS_2.7")
N2 = 5000
ISlogp <- read.table('logp.txt')
names(ISlogp)[1] <- "ISlogp"
ISlogq <- read.table('logq.txt')
names(ISlogq)[1] <- "ISlogq"
ISdata <- cbind(ISlogp,ISlogq)
ISdata <- mutate(ISdata, l2 = exp(ISlogp - ISlogq)) #numerical error return l2=0
ISdata <- mutate(ISdata, logl2 = (ISlogp - ISlogq))
View(ISdata)
#MCMC data
setwd("~/Documents/Astro/GCs/PyScripts/mockdata/fits/m5r3g1.5phi3.0a0.8_MCMC_2.7")
N1 = 50000
table1 <-read.table('logp.txt')
MClogp <- scan('logp.txt')
MClogq <- scan('logq.txt')
MCdata <- data.frame(cbind(MClogp,MClogq))
MCdata <- mutate(MCdata, l1 = exp(MClogp - MClogq))
MCdata <- mutate(MCdata, logl1 = (MClogp - MClogq))
View(MCdata)
#use N_eff size
N1 = N1/(1+38.78133)
#formula
s1 = N1/(N1+N2)
s2 = N2/(N1+N2)
##Accurate Log SumExp 2
logphat = 0
threshold <- 1e-5
stop = FALSE
while (!stop){
# compute log(s1 * l2 + s2 * p) using stable log operations
logxnum = logSumExp(c(logSumExp(c(log(s1),ISdata$logl2)),logSumExp(c(log(s2),logphat))))
# compute log(numerator) using stable log operations
lognum = logSumExp(ISdata$logl2 - logxnum) - log(N2)
# compute log(s1 * l1 + s2 * p) using stable log operations
logxdenom = logSumExp(c(logSumExp(c(log(s1),MCdata$logl1)),logSumExp(c(log(s2),logphat))))
# compute log(denominator) using stable log operation
logdenom = logSumExp(0 - logxdenom) - log(N1)
logphat1 <- lognum - logdenom
stop <- abs(logphat1 - logphat) < threshold
logphat <- logphat1
}
logphat
N2 = 5000
N1 = 50000
s1 = N1/(N1+N2)
s2 = N2/(N1+N2)
View(MCdata)
#----------------------------
#Thinning #MCMC data
setwd("~/Documents/Astro/GCs/PyScripts/mockdata/fits/m5r3g1.5phi3.0a0.8_MCMC_2.7")
N1 = 50000
table1 <-read.table('logp.txt')
MClogp <- c(table1[,38])
table2 <- read.table('logq.txt')
MClogq <- c(table2[,38])
MCdata <- data.frame(cbind(MClogp,MClogq))
MCdata <- mutate(MCdata, l1 = exp(MClogp - MClogq))
MCdata <- mutate(MCdata, logl1 = (MClogp - MClogq))
View(MCdata)
logphat = 0
threshold <- 1e-5
stop = FALSE
while (!stop){
# compute log(s1 * l2 + s2 * p) using stable log operations
logxnum = logSumExp(c(logSumExp(c(log(s1),ISdata$logl2)),logSumExp(c(log(s2),logphat))))
# compute log(numerator) using stable log operations
lognum = logSumExp(ISdata$logl2 - logxnum) - log(N2)
# compute log(s1 * l1 + s2 * p) using stable log operations
logxdenom = logSumExp(c(logSumExp(c(log(s1),MCdata$logl1)),logSumExp(c(log(s2),logphat))))
# compute log(denominator) using stable log operation
logdenom = logSumExp(0 - logxdenom) - log(N1)
logphat1 <- lognum - logdenom
stop <- abs(logphat1 - logphat) < threshold
logphat <- logphat1
}
logphat
#IS data
setwd("~/Documents/Astro/GCs/PyScripts/mockdata/fits/m5r3g1.5phi3.0a0.8_IS_2.7_a")
N2 = 5000
ISlogp <- read.table('logp.txt')
names(ISlogp)[1] <- "ISlogp"
ISlogq <- read.table('logq.txt')
names(ISlogq)[1] <- "ISlogq"
ISdata <- cbind(ISlogp,ISlogq)
ISdata <- mutate(ISdata, l2 = exp(ISlogp - ISlogq)) #numerical error return l2=0
ISdata <- mutate(ISdata, logl2 = (ISlogp - ISlogq))
View(ISdata)
setwd("~/Documents/Astro/GCs/PyScripts/mockdata/fits/m5r3g1.5phi3.0a0.8_MCMC_2.7_a")
N1 = 50000
table1 <-read.table('logp.txt')
MClogp <- scan('logp.txt')
MClogq <- scan('logq.txt')
MCdata <- data.frame(cbind(MClogp,MClogq))
MCdata <- mutate(MCdata, l1 = exp(MClogp - MClogq))
MCdata <- mutate(MCdata, logl1 = (MClogp - MClogq))
View(MCdata)
#use N_eff size
N1 = N1/(1+19.15077)
#formula
s1 = N1/(N1+N2)
s2 = N2/(N1+N2)
##Accurate Log SumExp 2
logphat = 0
threshold <- 1e-5
stop = FALSE
while (!stop){
# compute log(s1 * l2 + s2 * p) using stable log operations
logxnum = logSumExp(c(logSumExp(c(log(s1),ISdata$logl2)),logSumExp(c(log(s2),logphat))))
# compute log(numerator) using stable log operations
lognum = logSumExp(ISdata$logl2 - logxnum) - log(N2)
# compute log(s1 * l1 + s2 * p) using stable log operations
logxdenom = logSumExp(c(logSumExp(c(log(s1),MCdata$logl1)),logSumExp(c(log(s2),logphat))))
# compute log(denominator) using stable log operation
logdenom = logSumExp(0 - logxdenom) - log(N1)
logphat1 <- lognum - logdenom
stop <- abs(logphat1 - logphat) < threshold
logphat <- logphat1
}
logphat
N1 = 50000
N2 = 5000
s1 = N1/(N1+N2)
s2 = N2/(N1+N2)
#----------------------------
#Thinning #MCMC data
setwd("~/Documents/Astro/GCs/PyScripts/mockdata/fits/m5r3g1.5phi3.0a0.8_MCMC_2.7_a")
N1 = 50000
table1 <-read.table('logp.txt')
MClogp <- c(table1[,19],table1[,38])
table2 <- read.table('logq.txt')
MClogq <- c(table2[,19],table2[,38])
MCdata <- data.frame(cbind(MClogp,MClogq))
MCdata <- mutate(MCdata, l1 = exp(MClogp - MClogq))
MCdata <- mutate(MCdata, logl1 = (MClogp - MClogq))
View(MCdata)
N1
s1
logphat = 0
threshold <- 1e-5
stop = FALSE
while (!stop){
# compute log(s1 * l2 + s2 * p) using stable log operations
logxnum = logSumExp(c(logSumExp(c(log(s1),ISdata$logl2)),logSumExp(c(log(s2),logphat))))
# compute log(numerator) using stable log operations
lognum = logSumExp(ISdata$logl2 - logxnum) - log(N2)
# compute log(s1 * l1 + s2 * p) using stable log operations
logxdenom = logSumExp(c(logSumExp(c(log(s1),MCdata$logl1)),logSumExp(c(log(s2),logphat))))
# compute log(denominator) using stable log operation
logdenom = logSumExp(0 - logxdenom) - log(N1)
logphat1 <- lognum - logdenom
stop <- abs(logphat1 - logphat) < threshold
logphat <- logphat1
}
logphat
