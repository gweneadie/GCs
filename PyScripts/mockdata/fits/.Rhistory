mu_k = 0
threshold <- 1e-10
#Start EM
end = FALSE
while (!end) {
lam_k1 <- mean(delta(x, mu_k, lam_k))
mu_k1 <- sum(delta(x, mu_k, lam_k)*log(x*sqrt(2*pi))*log(x)) / sum(delta(x, mu_k, lam_k)*log(x*sqrt(2*pi)))
end <- abs(lam_k1 - lambda_k) < threshold & abs(mu_k1 - mu_k) < threshold
mu_k <- mu_k1
lam_k <- lam_k1
}
#Define functions
f1 <- function(x, mu) {
dlnorm(x, meanlog = mu, sdlog = 1)
}
f2 <- function(x) {
dexp(x, rate = 1)
}
delta <- function(x, mu, lambda) {
lambda * f1(x, mu) / (lambda * f1(x, mu) + (1 - lambda) * f2(x))
}
#initial estimate
lam_k = 0.5
mu_k = 0
threshold <- 1e-2
#Start EM
end = FALSE
while (!end) {
lam_k1 <- mean(delta(x, mu_k, lam_k))
mu_k1 <- sum(delta(x, mu_k, lam_k)*log(x*sqrt(2*pi))*log(x)) / sum(delta(x, mu_k, lam_k)*log(x*sqrt(2*pi)))
end <- abs(lam_k1 - lambda_k) < threshold & abs(mu_k1 - mu_k) < threshold
mu_k <- mu_k1
lam_k <- lam_k1
}
#Define functions
f1 <- function(x, mu) {
dlnorm(x, meanlog = mu, sdlog = 1)
}
f2 <- function(x) {
dexp(x, rate = 1)
}
delta <- function(x, mu, lambda) {
lambda * f1(x, mu) / (lambda * f1(x, mu) + (1 - lambda) * f2(x))
}
#initial estimate
lam_k = 0.5
mu_k = 0
threshold <- 1e-2
#Start EM
stop = FALSE
while (!stop) {
lam_k1 <- mean(delta(x, mu_k, lam_k))
mu_k1 <- sum(delta(x, mu_k, lam_k)*log(x*sqrt(2*pi))*log(x)) / sum(delta(x, mu_k, lam_k)*log(x*sqrt(2*pi)))
stop <- abs(lam_k1 - lambda_k) < threshold & abs(mu_k1 - mu_k) < threshold
mu_k <- mu_k1
lam_k <- lam_k1
}
pi
x <- scan("problem1.txt")
#Define functions
f1 <- function(x, mu) {
dlnorm(x, meanlog = mu, sdlog = 1)
}
f2 <- function(x) {
dexp(x, rate = 1)
}
delta <- function(x, mu, lambda) {
lambda * f1(x, mu) / (lambda * f1(x, mu) + (1 - lambda) * f2(x))
}
#initial estimate
lam_k = 0.5
mu_k = 0
threshold <- 1e-2
#Start EM
stop = FALSE
while (!stop) {
lam_k1 <- mean(delta(x, mu_k, lam_k))
mu_k1 <- sum(delta(x, mu_k, lam_k)*log(x*sqrt(2*pi))*log(x)) / sum(delta(x, mu_k, lam_k)*log(x*sqrt(2*pi)))
stop <- abs(lam_k1 - lam_k) < threshold & abs(mu_k1 - mu_k) < threshold
mu_k <- mu_k1
lam_k <- lam_k1
}
list(mu = mu_k, lambda = lam_k)
#Define functions
f1 <- function(x, mu) {
dlnorm(x, meanlog = mu, sdlog = 1)
}
f2 <- function(x) {
dexp(x, rate = 1)
}
delta <- function(x, mu, lambda) {
lambda * f1(x, mu) / (lambda * f1(x, mu) + (1 - lambda) * f2(x))
}
#initial estimate
lam_k = 0.5
mu_k = 0
threshold <- 1e-8
#Start EM
stop = FALSE
while (!stop) {
lam_k1 <- mean(delta(x, mu_k, lam_k))
mu_k1 <- sum(delta(x, mu_k, lam_k)*log(x*sqrt(2*pi))*log(x)) / sum(delta(x, mu_k, lam_k)*log(x*sqrt(2*pi)))
stop <- abs(lam_k1 - lam_k) < threshold & abs(mu_k1 - mu_k) < threshold
mu_k <- mu_k1
lam_k <- lam_k1
}
list(mu = mu_k, lambda = lam_k)
#Define functions
f1 <- function(x, mu) {
dlnorm(x, meanlog = mu, sdlog = 1)
}
f2 <- function(x) {
dexp(x, rate = 1)
}
delta <- function(x, mu, lambda) {
lambda * f1(x, mu) / (lambda * f1(x, mu) + (1 - lambda) * f2(x))
}
#initial estimate
lam_k = 0.5
mu_k = 0
threshold <- 1e-10
#Start EM
stop = FALSE
while (!stop) {
lam_k1 <- mean(delta(x, mu_k, lam_k))
mu_k1 <- sum(delta(x, mu_k, lam_k)*log(x*sqrt(2*pi))*log(x)) / sum(delta(x, mu_k, lam_k)*log(x*sqrt(2*pi)))
stop <- abs(lam_k1 - lam_k) < threshold & abs(mu_k1 - mu_k) < threshold
mu_k <- mu_k1
lam_k <- lam_k1
}
list(mu = mu_k, lambda = lam_k)
mle_full <- sum(log(lam_k * f_1(x, mu_k) + (1 - lam_k) * f_2(x)))
mle_restricted <- sum(log(f_2(x)))
test_stat = 2 * (mle_full - mle_restricted)
1 - pchisq(test_stat, 2)
MLEH0<-sum(log(f_2(x)))
MLEH0
MLEH1<-sum(log(lam_k * f_1(x, mu_k) + (1 - lam_k) * f_2(x)))
MLEH1
teststa<- 2*(MLEH1-MLEH0) #test statistics
1 - pchisq(test_stat, 2) #pvalue
MLEH0<-sum(log(f_2(x)))
MLEH0
MLEH1<-sum(log(lam_k * f_1(x, mu_k) + (1 - lam_k) * f_2(x)))
MLEH1
teststa<- 2*(MLEH1-MLEH0) #test statistics
teststa
1 - pchisq(test_stat, 2) #pvalue
#Define functions
f1 <- function(x, mu) {
dlnorm(x, meanlog = mu, sdlog = 1)
}
f2 <- function(x) {
dexp(x, rate = 1)
}
delta <- function(x, mu, lambda) {
lambda * f1(x, mu) / (lambda * f1(x, mu) + (1 - lambda) * f2(x))
}
#initial estimate
lam_k = 0.5
mu_k = 0
threshold <- 1e-10
#Start EM
stop = FALSE
while (!stop) {
lam_k1 <- mean(delta(x, mu_k, lam_k))
mu_k1 <- sum(delta(x, mu_k, lam_k)*log(x)) / sum(delta(x, mu_k, lam_k))
stop <- abs(lam_k1 - lam_k) < threshold & abs(mu_k1 - mu_k) < threshold
mu_k <- mu_k1
lam_k <- lam_k1
}
list(mu = mu_k, lambda = lam_k)
MLEH0<-sum(log(f_2(x)))
MLEH0
MLEH1<-sum(log(lam_k * f_1(x, mu_k) + (1 - lam_k) * f_2(x)))
MLEH1
teststa<- 2*(MLEH1-MLEH0) #test statistics
teststa
1 - pchisq(test_stat, 2) #pvalue
#Define functions
f1 <- function(x, mu) {
dlnorm(x, meanlog = mu, sdlog = 1)
}
f2 <- function(x) {
dexp(x, rate = 1)
}
delta <- function(x, mu, lambda) {
lambda * f1(x, mu) / (lambda * f1(x, mu) + (1 - lambda) * f2(x))
}
#initial estimate
lam_k = 0.5
mu_k = 0
threshold <- 1e-10
#Start EM
stop = FALSE
while (!stop) {
lam_k1 <- mean(delta(x, mu_k, lam_k))
mu_k1 <- sum(delta(x, mu_k, lam_k)*log(x)) / sum(delta(x, mu_k, lam_k))
stop <- abs(lam_k1 - lam_k) < threshold & abs(mu_k1 - mu_k) < threshold
mu_k <- mu_k1
lam_k <- lam_k1
}
list(mu = mu_k, lambda = lam_k)
MLEH0<-sum(log(f2(x)))
MLEH0
MLEH1<-sum(log(lam_k * f1(x, mu_k) + (1 - lam_k) * f2(x)))
MLEH1
teststa<- 2*(MLEH1-MLEH0) #test statistics
teststa
1 - pchisq(test_stat, 2) #pvalue
x <- scan("problem1.txt")
#Define functions
f1 <- function(x, mu) {
dlnorm(x, meanlog = mu, sdlog = 1)
}
f2 <- function(x) {
dexp(x, rate = 1)
}
delta <- function(x, mu, lambda) {
lambda * f1(x, mu) / (lambda * f1(x, mu) + (1 - lambda) * f2(x))
}
#initial estimate
lam_k = 0.5
mu_k = 0
threshold <- 1e-10
#Start EM
stop = FALSE
while (!stop) {
lam_k1 <- mean(delta(x, mu_k, lam_k))
mu_k1 <- sum(delta(x, mu_k, lam_k)*log(x)) / sum(delta(x, mu_k, lam_k))
stop <- abs(lam_k1 - lam_k) < threshold & abs(mu_k1 - mu_k) < threshold
mu_k <- mu_k1
lam_k <- lam_k1
}
list(mu = mu_k, lambda = lam_k)
MLEH0<-sum(log(f2(x)))
MLEH0
MLEH1<-sum(log(lam_k * f1(x, mu_k) + (1 - lam_k) * f2(x)))
MLEH1
teststa<- 2*(MLEH1-MLEH0) #test statistics
teststa
1 - pchisq(test_stat, 2) #pvalue
mle_full <- sum(log(lam_k * f_1(x, mu_k) + (1 - lam_k) * f_2(x)))
mle_restricted <- sum(log(f_2(x)))
test_stat = 2 * (mle_full - mle_restricted)
1 - pchisq(test_stat, 2)
mle_full
mle_restricted
1 - pchisq(teststa, 2) #pvalue
#Define functions
f1 <- function(x, mu) {
dlnorm(x, meanlog = mu, sdlog = 1)
}
f2 <- function(x) {
dexp(x, rate = 1)
}
delta <- function(x, mu, lambda) {
lambda * f1(x, mu) / (lambda * f1(x, mu) + (1 - lambda) * f2(x))
}
#initial estimate
lam_k = 0.5
mu_k = 0.5
threshold <- 1e-10
#Start EM
stop = FALSE
while (!stop) {
lam_k1 <- mean(delta(x, mu_k, lam_k))
mu_k1 <- sum(delta(x, mu_k, lam_k)*log(x)) / sum(delta(x, mu_k, lam_k))
stop <- abs(lam_k1 - lam_k) < threshold & abs(mu_k1 - mu_k) < threshold
mu_k <- mu_k1
lam_k <- lam_k1
}
list(mu = mu_k, lambda = lam_k)
#Define functions
f1 <- function(x, mu) {
dlnorm(x, meanlog = mu, sdlog = 1)
}
f2 <- function(x) {
dexp(x, rate = 1)
}
delta <- function(x, mu, lambda) {
lambda * f1(x, mu) / (lambda * f1(x, mu) + (1 - lambda) * f2(x))
}
#initial estimate
lam_k = 0.5
mu_k = 0.5
threshold <- 1e-8
#Start EM
stop = FALSE
while (!stop) {
lam_k1 <- mean(delta(x, mu_k, lam_k))
mu_k1 <- sum(delta(x, mu_k, lam_k)*log(x)) / sum(delta(x, mu_k, lam_k))
stop <- abs(lam_k1 - lam_k) < threshold & abs(mu_k1 - mu_k) < threshold
mu_k <- mu_k1
lam_k <- lam_k1
}
list(mu = mu_k, lambda = lam_k)
#Define functions
f1 <- function(x, mu) {
dlnorm(x, meanlog = mu, sdlog = 1)
}
f2 <- function(x) {
dexp(x, rate = 1)
}
delta <- function(x, mu, lambda) {
lambda * f1(x, mu) / (lambda * f1(x, mu) + (1 - lambda) * f2(x))
}
#initial estimate
lam_k = 0.5
mu_k = 0.5
threshold <- 1e-5
#Start EM
stop = FALSE
while (!stop) {
lam_k1 <- mean(delta(x, mu_k, lam_k))
mu_k1 <- sum(delta(x, mu_k, lam_k)*log(x)) / sum(delta(x, mu_k, lam_k))
stop <- abs(lam_k1 - lam_k) < threshold & abs(mu_k1 - mu_k) < threshold
mu_k <- mu_k1
lam_k <- lam_k1
}
list(mu = mu_k, lambda = lam_k)
MLEH0<-sum(log(f2(x)))
MLEH0
MLEH1<-sum(log(lam_k * f1(x, mu_k) + (1 - lam_k) * f2(x)))
MLEH1
teststa<- 2*(MLEH1-MLEH0) #test statistics
teststa
1 - pchisq(teststa, 2) #pvalue
descent1 <- function(x, y, niter=10) {
z <- x - y
obj <- 4 * exp(z + y) + 2 * exp(y) - 3 * z - 5 * y + abs(z)
for (i in 1:niter){
if (y>0) {z<- -y}
if (y< log(1/2)) {z <- log(1/2) - y}
else {z <- 0}
y <- log(5) - log(4 * exp(z) + 2)
obj <- c(obj, 4 * exp(z + y) + 2 * exp(y) - 3 * z - 5 * y + abs(z))
}
x <- z+y
r <- list(x=x,y=y,obj=obj)
r
}
r<- descent1(0,0)
r
descent1 <- function(x, y, niter,eps) {
objb <- 4*exp(x)+2*exp(y)- 3*x-2*y + (x-y)^2
for (i in 1: niter){
gradient <- c(4 * exp(x) - 3 + 2 * (x-y), 2 * exp(y) - 2 - 2 * (x-y))
x <- x - eps * gradient[1]
y <- y - eps * gradient[2]
objb <- c(objb, 4 * exp(x) - 3 + 2 * (x-y), 2 * exp(y) - 2 - 2 * (x-y) )
}
r <- list(x=x, y=y, obj = objb)
r
}
descent1 <- function(x, y, niter,eps) {
objb <- 4*exp(x)+2*exp(y)- 3*x-2*y + (x-y)^2
for (i in 1: niter){
gradient <- c(4 * exp(x) - 3 + 2 * (x-y), 2 * exp(y) - 2 - 2 * (x-y))
x <- x - eps * gradient[1]
y <- y - eps * gradient[2]
objb <- c(objb, 4 * exp(x) - 3 + 2 * (x-y), 2 * exp(y) - 2 - 2 * (x-y) )
}
rb <- list(x=x, y=y, obj = objb)
rb
}
rb <- descent1(0,0,10, 0.0005)
rb
rb <- descent1(0,0,50, 0.0005)
rb
descent1 <- function(x, y, niter,eps) {
objb <- 4*exp(x)+2*exp(y)- 3*x-2*y + (x-y)^2
for (i in 1: niter){
gradient <- c(4 * exp(x) - 3 + 2 * (x-y), 2 * exp(y) - 2 - 2 * (x-y))
x <- x - eps * gradient[1]
y <- y - eps * gradient[2]
objb <- c(objb, 4 * exp(x) - 3 + 2 * (x-y), 2 * exp(y) - 2 - 2 * (x-y) )
}
rb <- list(x=x, y=y, obj = objb)
rb
}
rb <- descent1(0,0,100, 0.0005)
rb
descent1 <- function(x, y, niter,eps) {
objb <- 4*exp(x)+2*exp(y)- 3*x-2*y + (x-y)^2
for (i in 1: niter){
gradient <- c(4 * exp(x) - 3 + 2 * (x-y), 2 * exp(y) - 2 - 2 * (x-y))
x <- x - eps * gradient[1]
y <- y - eps * gradient[2]
objb <- c(objb, 4 * exp(x) - 3 + 2 * (x-y), 2 * exp(y) - 2 - 2 * (x-y) )
}
rb <- list(x=x, y=y, obj = objb)
rb
}
rb <- descent1(0,0,100, 0.05)
rb
rb <- descent1(0,0,50, 0.05)
rb
rb <- descent1(0,0,50, 0.02)
rb
rb <- descent1(0,0,50, 0.1)
rb
descent1 <- function(x, y, niter,eps) {
objb <- 4*exp(x)+2*exp(y)- 3*x-2*y + (x-y)^2
for (i in 1: niter){
gradient <- c(4 * exp(x) - 3 + 2 * (x-y), 2 * exp(y) - 2 - 2 * (x-y))
x <- x - eps * gradient[1]
y <- y - eps * gradient[2]
objb <- c(objb, 4 * exp(x) - 3 + 2 * (x-y), 2 * exp(y) - 2 - 2 * (x-y) )
}
rb <- list(x=x, y=y, obj = objb[-10])
rb
}
rb <- descent1(0,0,100, 0.1)
rb
descent1 <- function(x, y, niter,eps) {
objb <- 4*exp(x)+2*exp(y)- 3*x-2*y + (x-y)^2
for (i in 1: niter){
gradient <- c(4 * exp(x) - 3 + 2 * (x-y), 2 * exp(y) - 2 - 2 * (x-y))
x <- x - eps * gradient[1]
y <- y - eps * gradient[2]
objb <- c(objb, 4 * exp(x) - 3 + 2 * (x-y), 2 * exp(y) - 2 - 2 * (x-y) )
}
rb <- list(x=x, y=y, obj = objb[,-10])
rb
}
rb <- descent1(0,0,100, 0.1)
descent1 <- function(x, y, niter,eps) {
objb <- 4*exp(x)+2*exp(y)- 3*x-2*y + (x-y)^2
for (i in 1: niter){
gradient <- c(4 * exp(x) - 3 + 2 * (x-y), 2 * exp(y) - 2 - 2 * (x-y))
x <- x - eps * gradient[1]
y <- y - eps * gradient[2]
objb <- c(objb, 4 * exp(x) - 3 + 2 * (x-y), 2 * exp(y) - 2 - 2 * (x-y) )
}
rb <- list(x=x, y=y, obj = objb[-5])
rb
}
rb <- descent1(0,0,100, 0.1)
rb
descent1 <- function(x, y, niter,eps) {
objb <- 4*exp(x)+2*exp(y)- 3*x-2*y + (x-y)^2
for (i in 1: niter){
gradient <- c(4 * exp(x) - 3 + 2 * (x-y), 2 * exp(y) - 2 - 2 * (x-y))
x <- x - eps * gradient[1]
y <- y - eps * gradient[2]
objb <- c(objb, 4 * exp(x) - 3 + 2 * (x-y), 2 * exp(y) - 2 - 2 * (x-y) )
}
rb <- list(x=x, y=y, obj = objb)
rb
}
rb <- descent1(0,0,100, 0.1)
rb
descent1 <- function(x, y, niter,eps) {
objb <- 4*exp(x)+2*exp(y)- 3*x-2*y + (x-y)^2
for (i in 1: niter){
gradient <- c(4 * exp(x) - 3 + 2 * (x-y), 2 * exp(y) - 2 - 2 * (x-y))
x <- x - eps * gradient[1]
y <- y - eps * gradient[2]
objb <- c(objb, 4*exp(x)+2*exp(y)- 3*x-2*y + (x-y)^2)
}
rb <- list(x=x, y=y, obj = objb)
rb
}
rb <- descent1(0,0,100, 0.1)
rb
rb <- descent1(0,0,100, 0.05)
rb
rb <- descent1(0,0,50, 0.05)
rb
rb <- descent2(0,0,50, 0.001)
descent2 <- function(x, y, niter,eps) {
objb <- 4*exp(x)+2*exp(y)- 3*x-2*y + (x-y)^2
for (i in 1: niter){
gradient <- c(4 * exp(x) - 3 + 2 * (x-y), 2 * exp(y) - 2 - 2 * (x-y))
x <- x - eps * gradient[1]
y <- y - eps * gradient[2]
objb <- c(objb, 4*exp(x)+2*exp(y)- 3*x-2*y + (x-y)^2)
}
rb <- list(x=x, y=y, obj = objb)
rb
}
rb <- descent2(0,0,50, 0.001)
rb
rb <- descent2(0,0,50, 0.01)
rb
rb <- descent2(0,0,50, 0.1)
rb
rb <- descent2(0,0,50, 0.6)
rb
rb <- descent2(0,0,50, 0.5)
rb
setwd("~/Documents/Astro/GCs/mockdata/data")
sample <- read.table('samples_5a.txt')
names(sample) <- c("m", "r","g","phi","a")
logp <- read.table('logp_5a.txt')
names(logp)[1] <- "LogPos"
logq <- read.table('logq_5a.txt')
names(logq)[1] <- "LogPro"
datas <- cbind(sample,logp,logq)
datas <- mutate(datas, NIW= exp((LogPos - LogPro)-max(LogPos - LogPro)))
datas <- mutate(datas, prob = NIW/ sum(NIW))
datas <- mutate(datas, ID = 1:nrow(datas))
View(datas)
setwd("~/Documents/Astro/GCs/PyScripts/mockdata/fits")
np <- import("numpy")
library(RcppCNPy)
datamcmc <- np$load("m5r3g1.5phi3.0_MCMC_2.7.npy")
View(datamcmc)
datamcmc$samples
theta_map = np.load(datamcmc)
theta_map = np$load(datamcmc)
